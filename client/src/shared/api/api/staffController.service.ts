/**
 * Kitty API Doc
 * This is a restful api document of Kitty.
 *
 * OpenAPI spec version: 1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { AddStaffDto } from '../model/addStaffDto';
import { RtnStaffQueryOutput } from '../model/rtnStaffQueryOutput';
import { Rtnboolean } from '../model/rtnboolean';
import { UpdateStaffDto } from '../model/updateStaffDto';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class StaffControllerService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * AddStaff
   *
   * @param body addStaffDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addStaffUsingPOST(body: AddStaffDto, observe?: 'body', reportProgress?: boolean): Observable<Rtnboolean>;
  public addStaffUsingPOST(body: AddStaffDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rtnboolean>>;
  public addStaffUsingPOST(body: AddStaffDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rtnboolean>>;
  public addStaffUsingPOST(body: AddStaffDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling addStaffUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Rtnboolean>('post', `${this.basePath}/api/staff/crateStaff`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * deleteStaffById
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteStaffByIdUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<Rtnboolean>;
  public deleteStaffByIdUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rtnboolean>>;
  public deleteStaffByIdUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rtnboolean>>;
  public deleteStaffByIdUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteStaffByIdUsingDELETE.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Rtnboolean>('delete', `${this.basePath}/api/staff/delete/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * enableStaffById
   *
   * @param id id
   * @param enable enable
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public enableStaffByIdUsingGET(id: number, enable?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rtnboolean>;
  public enableStaffByIdUsingGET(
    id: number,
    enable?: boolean,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Rtnboolean>>;
  public enableStaffByIdUsingGET(
    id: number,
    enable?: boolean,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Rtnboolean>>;
  public enableStaffByIdUsingGET(id: number, enable?: boolean, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling enableStaffByIdUsingGET.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (enable !== undefined && enable !== null) {
      queryParameters = queryParameters.set('enable', <any>enable);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Rtnboolean>('get', `${this.basePath}/api/staff/enable/${encodeURIComponent(String(id))}`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * getStaff
   *
   * @param keyword
   * @param page
   * @param pagesize
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getStaffUsingGET(
    keyword?: string,
    page?: number,
    pagesize?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<RtnStaffQueryOutput>;
  public getStaffUsingGET(
    keyword?: string,
    page?: number,
    pagesize?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<RtnStaffQueryOutput>>;
  public getStaffUsingGET(
    keyword?: string,
    page?: number,
    pagesize?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<RtnStaffQueryOutput>>;
  public getStaffUsingGET(
    keyword?: string,
    page?: number,
    pagesize?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (keyword !== undefined && keyword !== null) {
      queryParameters = queryParameters.set('keyword', <any>keyword);
    }
    if (page !== undefined && page !== null) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    if (pagesize !== undefined && pagesize !== null) {
      queryParameters = queryParameters.set('pagesize', <any>pagesize);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<RtnStaffQueryOutput>('get', `${this.basePath}/api/staff/list`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * UpdateStaff
   *
   * @param body updateStaffDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateStaffUsingPOST(body: UpdateStaffDto, observe?: 'body', reportProgress?: boolean): Observable<Rtnboolean>;
  public updateStaffUsingPOST(body: UpdateStaffDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rtnboolean>>;
  public updateStaffUsingPOST(body: UpdateStaffDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rtnboolean>>;
  public updateStaffUsingPOST(body: UpdateStaffDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateStaffUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Rtnboolean>('post', `${this.basePath}/api/staff/Update`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
}
