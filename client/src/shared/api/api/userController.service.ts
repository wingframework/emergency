/**
 * Kitty API Doc
 * This is a restful api document of Kitty.
 *
 * OpenAPI spec version: 1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { RtnUser } from '../model/rtnUser';
import { Rtnboolean } from '../model/rtnboolean';
import { UserUpdateDto } from '../model/userUpdateDto';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class UserControllerService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * deleteById
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteByIdUsingDELETE3(id?: number, observe?: 'body', reportProgress?: boolean): Observable<Rtnboolean>;
  public deleteByIdUsingDELETE3(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rtnboolean>>;
  public deleteByIdUsingDELETE3(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rtnboolean>>;
  public deleteByIdUsingDELETE3(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('id', <any>id);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Rtnboolean>('delete', `${this.basePath}/api/user/deleteById`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * detailById
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public detailByIdUsingGET1(id?: number, observe?: 'body', reportProgress?: boolean): Observable<RtnUser>;
  public detailByIdUsingGET1(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RtnUser>>;
  public detailByIdUsingGET1(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RtnUser>>;
  public detailByIdUsingGET1(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('id', <any>id);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<RtnUser>('get', `${this.basePath}/api/user/detail/${encodeURIComponent(String(id))}`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * userAdd
   *
   * @param abatarUrl
   * @param email
   * @param func
   * @param nickname
   * @param phoneNumber
   * @param rbac
   * @param roleIdList
   * @param sex
   * @param status
   * @param userUnit
   * @param username
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userAddUsingPOST(
    abatarUrl?: string,
    email?: string,
    func?: string,
    nickname?: string,
    phoneNumber?: string,
    rbac?: string,
    roleIdList?: Array<number>,
    sex?: number,
    status?: number,
    userUnit?: string,
    username?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Rtnboolean>;
  public userAddUsingPOST(
    abatarUrl?: string,
    email?: string,
    func?: string,
    nickname?: string,
    phoneNumber?: string,
    rbac?: string,
    roleIdList?: Array<number>,
    sex?: number,
    status?: number,
    userUnit?: string,
    username?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Rtnboolean>>;
  public userAddUsingPOST(
    abatarUrl?: string,
    email?: string,
    func?: string,
    nickname?: string,
    phoneNumber?: string,
    rbac?: string,
    roleIdList?: Array<number>,
    sex?: number,
    status?: number,
    userUnit?: string,
    username?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Rtnboolean>>;
  public userAddUsingPOST(
    abatarUrl?: string,
    email?: string,
    func?: string,
    nickname?: string,
    phoneNumber?: string,
    rbac?: string,
    roleIdList?: Array<number>,
    sex?: number,
    status?: number,
    userUnit?: string,
    username?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (abatarUrl !== undefined && abatarUrl !== null) {
      queryParameters = queryParameters.set('abatarUrl', <any>abatarUrl);
    }
    if (email !== undefined && email !== null) {
      queryParameters = queryParameters.set('email', <any>email);
    }
    if (func !== undefined && func !== null) {
      queryParameters = queryParameters.set('func', <any>func);
    }
    if (nickname !== undefined && nickname !== null) {
      queryParameters = queryParameters.set('nickname', <any>nickname);
    }
    if (phoneNumber !== undefined && phoneNumber !== null) {
      queryParameters = queryParameters.set('phoneNumber', <any>phoneNumber);
    }
    if (rbac !== undefined && rbac !== null) {
      queryParameters = queryParameters.set('rbac', <any>rbac);
    }
    if (roleIdList) {
      roleIdList.forEach(element => {
        queryParameters = queryParameters.append('roleIdList', <any>element);
      });
    }
    if (sex !== undefined && sex !== null) {
      queryParameters = queryParameters.set('sex', <any>sex);
    }
    if (status !== undefined && status !== null) {
      queryParameters = queryParameters.set('status', <any>status);
    }
    if (userUnit !== undefined && userUnit !== null) {
      queryParameters = queryParameters.set('userUnit', <any>userUnit);
    }
    if (username !== undefined && username !== null) {
      queryParameters = queryParameters.set('username', <any>username);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Rtnboolean>('post', `${this.basePath}/api/user/userAdd`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * userQuery
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userQueryUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Rtnboolean>;
  public userQueryUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rtnboolean>>;
  public userQueryUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rtnboolean>>;
  public userQueryUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Rtnboolean>('get', `${this.basePath}/api/user/userQuery`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * userUpdate
   *
   * @param body userUpdateDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userUpdateUsingPOST(body: UserUpdateDto, observe?: 'body', reportProgress?: boolean): Observable<Rtnboolean>;
  public userUpdateUsingPOST(body: UserUpdateDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rtnboolean>>;
  public userUpdateUsingPOST(body: UserUpdateDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rtnboolean>>;
  public userUpdateUsingPOST(body: UserUpdateDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling userUpdateUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Rtnboolean>('post', `${this.basePath}/api/user/userUpdate`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
}
