export class TreeUtilService {
    /**列表成树 */
    arrayToTree(
            items,
            opt = { idKey: 'id', parentIdKey: 'parentId', titleKey: 'string' }
        ) {
            opt.idKey = opt.idKey || 'id';
            opt.parentIdKey = opt.parentIdKey || 'parentId';
            opt.titleKey = opt.titleKey || 'title';

            let topMenuList = this.getRootMenus(items, opt);
            topMenuList.forEach(top => (top.children = this.getChildren(top, items, opt)));

            return topMenuList;
        }
        /** 递归迭代子类 */
    getChildren(topItem, options, opt) {
            let children = options.filter(menu => menu[opt.parentIdKey] == topItem[opt.idKey]);
            for (let submenu of children) {
                submenu.children = this.getChildren(submenu, options, opt);
            }
            return children;
        }
        /**
         * 查找顶层节点,支持非整树数据加载也可以查找出树节点
         *
         * 例如数据库有一组菜单
         * [
         *
         * {id:1,text:'系统管理',parentId:0},
         *
         * {id:11,text:'角色管理',parentId:1},
         *
         * {id:111,text:'用户管理',parentId:11}]
         *
         * 支持全部加载成树
         *
         * 也支持   [{id:11,text:'角色管理',parentId:1},{id:111,text:'用户管理',parentId:11}] 形式加载成树
         */
    getRootMenus(items, opt) {
            return items.filter(menu => !items.find(item => menu[opt.parentIdKey] == item[opt.idKey]));
        }
        /**遍历子节点 */
    enumChildren(item, callback) {
        callback(item);
        if (item.children) {
            item.children.forEach((child) => this.enumChildren(child, callback));
        }
    }
}