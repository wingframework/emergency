package com.example.saas.passport.controllers;

import com.example.saas.AutoMapper;
import com.example.saas.configs.Rtn;
import com.example.saas.common.sevices.SmsService;
import com.example.saas.passport.dto.*;
import com.example.saas.common.mappers.SmsMapper;
import com.example.saas.passport.entitys.Sms;
import com.example.saas.passport.entitys.User;
import com.example.saas.passport.mappers.UserMapper;
import com.example.saas.configs.TokenService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.UUID;



@Api("用户api")
@RestController
@RequestMapping("api/user")

public class UserController {
    //实现引用类型的赋值
    @Autowired
    private UserMapper userMapper;
    @Autowired
    private TokenService tokenService;
    @Autowired
    private SmsService smsService;
    @Autowired
    private SmsMapper smsMapper;

    @PostMapping("register")
    public Rtn<RegisterUserOutput> RegisterUser(@Validated @RequestBody RegisterInputDto registerInputDto){

         User newUser = AutoMapper.INSTANCE.RegisterDtoToUser(registerInputDto);
      // this
        Sms sms= smsService.getLastSmsNotExpire(registerInputDto.getPhoneNumber(),5);

        if(sms==null){
            return   Rtn.Error("请先发短信");
        }   else {
            if(!sms.getCode().equals(registerInputDto.getCode())) {
                return Rtn.Error("验证码错误");
            }
        }
                              //Re:renewedly,重新地，再度
        if(!registerInputDto.getRePassword().equals(registerInputDto.getPassword())){
            return   Rtn.Error("两次密码不一致");
        }
       int  UserExsitCount = userMapper.countUserExsit(newUser);

       if( UserExsitCount>0 ){
           return Rtn.Error("用户名已存在或手机号已存在");
       }
        userMapper.Create(newUser);

       String token=   tokenService.getToken(newUser);
       RegisterUserOutput data= new RegisterUserOutput(token);
         return  Rtn.Success(  data);
    }

    @PostMapping("login")
    @ApiOperation(value ="登录" )
    public Rtn<LoginUserOutput> UserLogin( @Validated @RequestBody  UserLoginDto userLoginDto){

        User user1 = AutoMapper.INSTANCE.LoginDtoToUser(userLoginDto);
        int UserExsitCount = userMapper.countUserExsit(user1);
        if(UserExsitCount==0){
         return Rtn.Error("您输入的用户名不存在，请先去注册");
        }

                                 //拿到近几分钟的最后一条短信
//        Sms sms= this.smsService.getLastSmsExpire(dbUser.getPhoneNumber(),5);
//        if(sms==null){
//            return   Rtn.Error("请先发短信");
//
//        }   else {
//            if(!sms.getCode().equals(userLoginDto.getCode())) {
//
//                return Rtn.Error("验证码错误");
//            }
//        }

        User dbUser=  userMapper.findUserByUsername( userLoginDto.getUsername() );
          if(dbUser.getPassword().equals(userLoginDto.getPassword())){
              String token = tokenService.getToken(dbUser);
              LoginUserOutput data2 = new LoginUserOutput(token);
              return Rtn.Success(data2);
          } else{
              return Rtn.Error("用户名或密码错误");
          }
    }

    @PostMapping("ForgetPassword")
    //@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；而最常用的使用请求体传参的无疑是POST请求了，所以使用@RequestBody接收数据时，一般都用POST方式进行提交。
    public Rtn<Boolean> UserForgetPassword(@RequestBody UserForgetPasswordDto userForgetPasswordDto){
        User user2 = AutoMapper.INSTANCE.ForgetDtoToUser(userForgetPasswordDto);
       // String num2 = userForgetPasswordDto.getPhoneNumber();
        Sms sms= this.smsService.getLastSmsNotExpire(userForgetPasswordDto.getPhoneNumber(),5);
        if(sms==null){
            return   Rtn.Error("请先发短信");

        }   else {
            if(!sms.getCode().equals(userForgetPasswordDto.getCode())) {

                return Rtn.Error("验证码错误");
            }
        }

        if(userForgetPasswordDto.getRePassword().equals(userForgetPasswordDto.getPassword()) ){
            return Rtn.Error("两次输入的密码不一致,请重新输入");
        } else {
              String num =   userForgetPasswordDto.getPhoneNumber();
            User user= userMapper.FindUserByPhoneNumber( num);
            if(user==null){
                return Rtn.Error("该用户不存在,请重新输入电话号码");
            }else{
               // String b = userForgetPasswordDto.getPassword();
                userMapper.UpdatePasswordByPhoneNumber(userForgetPasswordDto.getPhoneNumber(),userForgetPasswordDto.getPassword());
            }
            return Rtn.Success(true);

        }
    }

    @GetMapping("GetUserInfo")
    public Rtn<User> GetUserInfo( ){

        User user = tokenService.getUser();
        return Rtn.Success(user);
    }

    @GetMapping("sentSms")
    public Rtn<Boolean> SentSms(@Validated SentSmsInput sentSmsInput ) throws  Exception{
      Sms lastSms=  this.smsService.getLastSmsNotExpire(sentSmsInput.getPhonenumber(),5);
//      if(lastSms!=null){
//         return Rtn.Error("稍后尝试");
//      }
       String code=   UUID.randomUUID().toString().substring(0,4);
       smsService.sendSms( sentSmsInput.getPhonenumber(),code);
       Sms sms= new Sms();
       sms.setPhonenumber(sentSmsInput.getPhonenumber());
       sms.setCode(code);
       sms.setSentAt(new Date());
       smsMapper.Create(sms);


        return  Rtn.Success(true);
    }

//    public Rtn<List<Sms>> querySentSmsExpire( QuerySentSmsExpire querySentSmsExpire){
//
//
//             return Rtn.Success(list);
//
//    }

}
